
@*
* John Moreau
* CSS233
* 12/9/2023
*@
@model IncidentViewModel
@{
    string isInvalid(string str) => ViewData.ModelState.GetFieldValidationState(str) == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid ? "is-invalid" : ""; // WHY IS THIS SO HARD?
    string editDisabledCheck = Model.CurrentAction == "Edit" ? "disabled" : "";
    string title = Model.CurrentAction + " Incident";
    ViewData["Title"] = title;

}
<h2>@title</h2>
@if(Model.CurrentIncident != null)
{
    <form asp-controller="Incident" asp-action="Edit" method="post">
        @*<div asp-validation-summary="All" class="text-danger"></div>*@

        <div class="row mb-3">
            <div class="col-2 mt-1">
                <label asp-for="@Model.CurrentIncident.CustomerId" class="form-label">Customer</label>
            </div>
            <div class="col-5">
                <select asp-for="@Model.CurrentIncident.CustomerId" asp-items="@(new SelectList(@Model.Customers, "Id", "Name"))" class="form-select @isInvalid("CurrentIncident.CustomerId")">
                    <option value=0>Select a customer...</option>
                </select>
            </div>
            <div class="col-5 text-danger">
                @Html.ValidationMessage("CurrentIncident.CustomerId")
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-2 mt-1">
                <label asp-for="@Model.CurrentIncident.ProductId" class="form-label">Product</label>
            </div>
            <div class="col-5">
                <select asp-for="@Model.CurrentIncident.ProductId" asp-items="@(new SelectList(@Model.Products, "Id", "Name"))" class="form-select @isInvalid("CurrentIncident.ProductId")">
                    <option value=0>Select a Product...</option>
                </select>
            </div>
            <div class="col-5 text-danger">
                @Html.ValidationMessage("CurrentIncident.ProductId")
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-2 mt-1">
                <label asp-for="@Model.CurrentIncident.Title" class="form-label">Title</label>
            </div>
            <div class="col-5">
                <input asp-for="@Model.CurrentIncident.Title" class="form-control @isInvalid("CurrentIncident.Title")">
            </div>
            <div class="col-5 text-danger">
                @Html.ValidationMessage("CurrentIncident.Title")
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-2 mt-1">
                <label asp-for="@Model.CurrentIncident.Description" class="form-label">Description</label>
            </div>
            <div class="col-5">
                <textarea asp-for="@Model.CurrentIncident.Description" class="form-control @isInvalid("CurrentIncident.Description")" type="text"></textarea>
            </div>
            <div class="col-5 text-danger">
                @Html.ValidationMessage("CurrentIncident.Description")
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-2 mt-1">
                <label asp-for="@Model.CurrentIncident.TechnicianId" class="form-label">Technician</label>
            </div>
            <div class="col-5">
                <select asp-for="@Model.CurrentIncident.TechnicianId" asp-items="@(new SelectList(@Model.Technicians, "Id", "Name"))" class="form-select @isInvalid("CurrentIncident.TechnicianId")">
                    <option value=0>Choose a technician...</option>
                </select>
            </div>
            <div class="col-5 text-danger">
                @Html.ValidationMessage("CurrentIncident.TechnicianId")
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-2 mt-1">
                <label asp-for="@Model.CurrentIncident.DateOpened" class="form-label">Date Opened</label>
            </div>
            <div class="col-5">
                <input asp-for="@Model.CurrentIncident.DateOpened" class="form-control @isInvalid("CurrentIncident.DateOpened")" value="@(@Model.CurrentIncident?.DateOpened == string.Empty ? DateTime.Now.ToString("MM/dd/yyyy h:mm:ss tt") : @Model.CurrentIncident?.DateOpened)" disabled> @* disabled doesn't submit any value...*@
            </div>
            <div class="col-5 text-danger">
                @Html.ValidationMessage("CurrentIncident.DateOpened")
            </div>
        </div>
        @*
            Not sure why the warnings here for Dereference of possibly null reference.
            I check if the reference is null at the top level, so if we get here, it's not null.
            Possibly a bug with Visual Studio.
        *@
        <div class="row mb-3">
            <div class="col-2 mt-1">
                <label asp-for="@Model.CurrentIncident.DateClosed" class="form-label">Date Closed</label>
            </div>
            <div class="col-5">
                <input asp-for="@Model.CurrentIncident.DateClosed" class="form-control" step="any" type="datetime-local" disabled="@(ViewBag.Action == "Add")">
            </div>
        </div>

        <input type="hidden" asp-for="@Model.CurrentIncident.DateOpened" value="@(@Model.CurrentIncident?.DateOpened == string.Empty ? DateTime.Now.ToString("MM/dd/yyyy h:mm:ss tt") : @Model.CurrentIncident?.DateOpened)" /> @*To allow date opened to send in the POST request when updating.*@

        <input type="hidden" asp-for="@Model.CurrentIncident.Id" />



        <div class="mb-3">
            <button type="submit" class="btn btn-primary">Save</button>
            <a asp-controller="Incident" asp-action="List" asp-route-id="@Model.CurrentIncident?.Id"
               class="btn btn-primary">Cancel</a>
        </div>

    </form>
}
else
{
    <div class="alert alert-warning">
        No Incident found. Please contact support.
    </div>
}
